<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://modeler.netgrif.com/petriflow_schema.xsd">
	<id>system</id>
	<initials>SYSTEM</initials>
	<title>system</title>
	<defaultRole>true</defaultRole>
	<transitionRole>false</transitionRole>
	<!-- TRANSACTIONS -->
	<!-- ROLES -->
	<!-- DATA -->
	<data type="enumeration">
		<id>enumeration_0</id>
		<title>Zvol tim</title>
		<placeholder>placeholder</placeholder>
		<desc>description</desc>
		<init>option1</init>
	</data>
	<data type="taskRef">
		<id>taskRef_zvolene_podujatie</id>
		<title>Dostpne podujatia</title>
		<placeholder>placeholder</placeholder>
		<desc>description</desc>
		<init>value</init>
	</data>
	<data type="taskRef">
		<id>taskRef_osoba</id>
		<title>taskref uzivatel</title>
		<placeholder>Uzivatel</placeholder>
		<desc>description</desc>
		<init>value</init>
	</data>
	<data type="taskRef">
		<id>taskRef_podujatie_vytvorenie</id>
		<title>TakRef vytvorene podujatie</title>
		<placeholder>placeholder</placeholder>
		<desc>description</desc>
		<init>value</init>
	</data>
	<data type="taskRef">
		<id>taskRef_tim</id>
		<title>TakRef vytvorenie timu</title>
		<placeholder>placeholder</placeholder>
		<desc>description</desc>
		<init>value</init>
	</data>
	<data type="taskRef">
		<id>taskRef_osoba_udaje</id>
		<title>taskRef osoba udaje</title>
		<placeholder>placeholder</placeholder>
		<desc>description</desc>
		<init>value</init>
	</data>
	<data type="enumeration_map">
		<id>enum_podujatia</id>
		<title>Dostupne podujatia</title>
	</data>
	<!-- I18NS -->
	<!-- TRANSITIONS -->
	<transition>
		<id>35</id>
		<x>740</x>
		<y>660</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Domovska stranka / user</label>
		<icon>settings</icon>
		<trigger type="auto"/>
		<dataGroup>
			<id>DataGroup_11</id>
			<dataRef>
				<id>taskRef_osoba</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>42_finish</id>
			<actions phase="post">
				<action>
					osoba_ref: f.taskRef_osoba;

					change osoba_ref value {
					return []
					}

					def groupId = findCase{it.processIdentifier.eq("org_group").and(it.author.id.eq(loggedUser().id))}?.stringId

					def mojaOsoba = findCase({it.processIdentifier.contains("osoba").and(it.author.id.eq(loggedUser().id))})
					if(mojaOsoba == null) {
					def novaOsoba = createCase("${groupId}_clen_osoba" as String, loggedUser().name)
					def osobne_udaje = assignTask("2", novaOsoba)
					setData(osobne_udaje, [
					"name": [
					"value": loggedUser().name,
					"type" : "text"
					],
					"surname": [
					"value": loggedUser().surname,
					"type" : "text"
					],
					"mail": [
					"value": loggedUser().email,
					"type" : "text"
					],
					"user_id": [
					"value": loggedUser().id,
					"type" : "text"
					],
					])
					finishTask(osobne_udaje)
					def osoba_udaje = assignTask("8", novaOsoba)
					osoba_ref.value.add(osoba_udaje.stringId)
					change osoba_ref value{
					return osoba_ref.value
					}
					}
					else {
					def osoba_udaje = assignTask("8", mojaOsoba)
					osoba_ref.value.add(osoba_udaje.stringId)
					change osoba_ref value{
					return osoba_ref.value
					}
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>39</id>
		<x>300</x>
		<y>900</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vyhladat podujatie / user</label>
		<dataGroup>
			<id>DataGroup_111</id>
			<dataRef>
				<id>taskRef_zvolene_podujatie</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>enum_podujatia</id>
				<logic>
					<behavior>editable</behavior>
					<action trigger="set">
						podujatie_ref: f.taskRef_zvolene_podujatie,
						podujatie_map: f.enum_podujatia;

						def vybrane_podujatie = podujatie_map.value

						def taskInfo = findTask( { it.caseId.eq(vybrane_podujatie).and(it.transitionId.eq("56")) } )


						if(podujatie_ref.value != null) {
							if(podujatie_ref.value[0] != null) {
								t = findTask({it._id.eq(podujatie_ref.value[1])})
								cancelTask(t)
							}
							change podujatie_ref value {
								return []
							}
						}
						change podujatie_ref value {
							return []
						}
						podujatie_ref.value.add(taskInfo.stringId)
						change podujatie_ref value {
						return podujatie_ref.value
						}
						def taskPrihlasit = findTask( { it.caseId.eq(vybrane_podujatie).and(it.transitionId.eq("1")) } )
						assignTask(taskPrihlasit)
						podujatie_ref.value.add(taskPrihlasit.stringId)
						change podujatie_ref value {
						return podujatie_ref.value
						}

					</action>
				</logic>
				<layout>
					<x>1</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>421_assign</id>
			<actions phase="post">
				<action>

					zvolene_podujatie_ref: f.taskRef_zvolene_podujatie,
					podujatia_map: f.enum_podujatia;

					def map = [:]

					def cases = findCases ({ it.processIdentifier.contains("podujatie") });
					cases.each {

					def id = it.stringId
					task = findTask( { it.caseId.eq(id).and(it.transitionId.eq("56")) });
					nazov_podujatia = getData(task).get('podujatie_nazov');
					map[id] = nazov_podujatia.value

					}
					change podujatia_map options {
					return map;
					}

				</action>
			</actions>
		</event>
		<event type="cancel">
			<id>422_assign</id>
			<actions phase="post">
				<action>

					podujatie_ref: f.taskRef_zvolene_podujatie,
					podujatia_map: f.enum_podujatia;

					if(podujatie_ref.value != null) {
					if(podujatie_ref.value[0] != null) {
					t = findTask({it._id.eq(podujatie_ref.value[1])})
					cancelTask(t)
					}
					change podujatie_ref value {
					return []
					}
					}
					change podujatie_ref value {
					return []
					}

					def map = [:]
					change podujatia_map options {
					return map
					}

				</action>
			</actions>
		</event>
		<event type="finish">
			<id>421_finish</id>
			<actions phase="pre">
				<action>
					zvolene_podujatie_ref: f.taskRef_zvolene_podujatie;

					def prihlasenieTask = findTask(zvolene_podujatie_ref.value[1])

					finishTask(prihlasenieTask)

				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>40</id>
		<x>620</x>
		<y>900</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Zobrazit profil</label>
		<dataGroup>
			<id>DataGroup_1</id>
			<dataRef>
				<id>taskRef_osoba</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>42</id>
		<x>862</x>
		<y>893</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vytvorit podujatie / usr</label>
		<dataGroup>
			<id>DataGroup_1111</id>
			<dataRef>
				<id>taskRef_podujatie_vytvorenie</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>42_finish</id>
			<actions phase="post">
				<action>
					podujatie_udaje_ref: f.taskRef_podujatie_vytvorenie;
					def konstruktor = findTask(podujatie_udaje_ref.value[0])

					finishTask(konstruktor)

				</action>
			</actions>
		</event>
		<event type="assign">
			<id>42_assign</id>
			<actions phase="pre">
				<action>

					vytvorenie_podujatia_ref: f.taskRef_podujatie_vytvorenie;

					def groupId = findCase{it.processIdentifier.eq("org_group").and(it.author.id.eq(loggedUser().id))}?.stringId
					def podujatie = createCase("${groupId}_podujatie" as String, "Nov√© podujatie")
					def konstruktor = assignTask("2", podujatie)
					change vytvorenie_podujatia_ref value {
					return [konstruktor.stringId]
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>43</id>
		<x>1180</x>
		<y>900</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vlastne podujatia / usr</label>
	</transition>
	<transition>
		<id>51</id>
		<x>1180</x>
		<y>1140</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Spravovat podujatie / usr</label>
	</transition>
	<transition>
		<id>77</id>
		<x>1060</x>
		<y>1420</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Zrusit / usr</label>
	</transition>
	<transition>
		<id>78</id>
		<x>1300</x>
		<y>1420</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Editovat / usr</label>
	</transition>
	<transition>
		<id>130</id>
		<x>1460</x>
		<y>860</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Vytvorit tim</label>
		<dataGroup>
			<id>DataGroup_11111</id>
			<dataRef>
				<id>taskRef_tim</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>42_finish</id>
			<actions phase="post">
				<action>
					tim_ref: f.taskRef_tim;
					def vyplnenie_udajov = findTask(tim_ref.value[0])

					finishTask(vyplnenie_udajov)

				</action>
			</actions>
		</event>
		<event type="assign">
			<id>42_assign</id>
			<actions phase="pre">
				<action>

					tim_ref: f.taskRef_tim;

					def groupId = findCase{it.processIdentifier.eq("org_group").and(it.author.id.eq(loggedUser().id))}?.stringId
					def tim = createCase("${groupId}_tim" as String, "Novy tim")
					def vyplnenie_udajov = assignTask("1", tim)
					change tim_ref value {
						return [vyplnenie_udajov.stringId]
					}
				</action>
			</actions>
		</event>
	</transition>
	<!-- PLACES -->
	<place>
		<id>25</id>
		<x>740</x>
		<y>500</y>
		<label></label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>37</id>
		<x>740</x>
		<y>780</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>50</id>
		<x>1180</x>
		<y>1020</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>73</id>
		<x>1060</x>
		<y>1300</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>74</id>
		<x>1300</x>
		<y>1300</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<!-- ARCS -->
	<arc>
		<id>36</id>
		<type>regular</type>
		<sourceId>25</sourceId>
		<destinationId>35</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>38</id>
		<type>regular</type>
		<sourceId>35</sourceId>
		<destinationId>37</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>44</id>
		<type>regular</type>
		<sourceId>37</sourceId>
		<destinationId>39</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>300</x><y>820</y></breakPoint>
	</arc>
	<arc>
		<id>45</id>
		<type>regular</type>
		<sourceId>37</sourceId>
		<destinationId>40</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>47</id>
		<type>regular</type>
		<sourceId>37</sourceId>
		<destinationId>42</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>48</id>
		<type>regular</type>
		<sourceId>37</sourceId>
		<destinationId>43</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>1180</x><y>820</y></breakPoint>
	</arc>
	<arc>
		<id>52</id>
		<type>regular</type>
		<sourceId>43</sourceId>
		<destinationId>50</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>53</id>
		<type>regular</type>
		<sourceId>50</sourceId>
		<destinationId>51</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>75</id>
		<type>regular</type>
		<sourceId>51</sourceId>
		<destinationId>73</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>76</id>
		<type>regular</type>
		<sourceId>51</sourceId>
		<destinationId>74</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>79</id>
		<type>regular</type>
		<sourceId>73</sourceId>
		<destinationId>77</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>80</id>
		<type>regular</type>
		<sourceId>74</sourceId>
		<destinationId>78</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>131</id>
		<type>regular</type>
		<sourceId>37</sourceId>
		<destinationId>130</destinationId>
		<multiplicity>1</multiplicity>
		<breakPoint><x>1460</x><y>820</y></breakPoint>
	</arc>
	<arc>
		<id>145</id>
		<type>regular</type>
		<sourceId>42</sourceId>
		<destinationId>37</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>147</id>
		<type>regular</type>
		<sourceId>39</sourceId>
		<destinationId>37</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>148</id>
		<type>regular</type>
		<sourceId>130</sourceId>
		<destinationId>37</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>149</id>
		<type>regular</type>
		<sourceId>40</sourceId>
		<destinationId>37</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</document>
